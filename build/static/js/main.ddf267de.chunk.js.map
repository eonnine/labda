{"version":3,"sources":["App.tsx","graphql/fragmentTypes.ts","graphql/apollo.ts","index.tsx"],"names":["App","className","result","httpLink","createHttpLink","uri","credentials","authLink","setContext","operation","headers","token","localStorage","getItem","authorization","retryLink","RetryLink","delay","initial","max","jitter","attempts","retryIf","error","_operation","errorLink","onError","graphQLErrors","networkError","forward","err","extensions","code","oldHeaders","getContext","console","dir","cache","InMemoryCache","addTypename","dataIdFromObject","obj","key","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","cacheRedirects","apolloClient","ApolloClient","ssrMode","link","from","connectToDevTools","queryDeduplication","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","mutate","ReactDOM","render","client","document","getElementById"],"mappings":"gOAYeA,MARf,WACE,OACE,yBAAKC,UAAU,OAAf,W,6ECuCiBC,EAjCyB,CAC5C,SAAY,CACV,MAAS,CACP,CACE,KAAQ,YACR,KAAQ,OACR,cAAiB,CACf,CACE,KAAQ,SAEV,CACE,KAAQ,QAEV,CACE,KAAQ,UAEV,CACE,KAAQ,UAEV,CACE,KAAQ,WAEV,CACE,KAAQ,YAEV,CACE,KAAQ,gBCpBdC,EAAWC,YAAe,CAC9BC,IAAI,WAAD,OAPoB,kCAQvBC,YAAa,SAmCTC,EAAWC,aAAW,SAACC,EAAD,GAA6B,IAAfC,EAAc,EAAdA,QAClCC,EAAQC,aAAaC,QAAQ,SACnC,MAAO,CACLH,QAAQ,eACHA,EADE,CAELI,cAAeH,EAAK,iBAAaA,GAAU,SAS3CI,EAAY,IAAIC,IAAU,CAC9BC,MAAO,CACLC,QAAS,IACTC,IAAK,IACLC,QAAQ,GAEVC,SAAU,CACRF,IAAK,EACLG,QAAS,SAACC,EAAOC,GAAR,QAAyBD,MAQhCE,EAAYC,aAAQ,YAA0D,IAAvDC,EAAsD,EAAtDA,cAAeC,EAAuC,EAAvCA,aAAcnB,EAAyB,EAAzBA,UAAWoB,EAAc,EAAdA,QACnE,GAAIF,EAAe,CAAC,IAAD,gBACDA,GADC,IACjB,2BAA+B,CAAC,IAAvBG,EACP,QAD6B,QAChBC,YAAc,IAAIC,MAC7B,IAAK,kBAKH,IAAMC,EAAaxB,EAAUyB,aAAaxB,QAQ1C,OAPAD,EAAUD,WAAW,CACnBE,QAAQ,eACHuB,EADE,CAELnB,cAAc,gBAIXe,EAAQpB,KAhBJ,+BAoBfmB,GACFO,QAAQC,IAAI,gBAAiBR,MAQ3BS,EAAQ,IAAIC,IAAc,CAC9BC,aAAa,EACbC,iBAAkB,SAACC,GAAD,OAAcA,EAAIC,KAAO,MAO3CC,gBAAiB,IAAIC,IAA6B,CAChDC,iCAEFC,eAAgB,KAOLC,EAAe,IAAIC,IAAa,CAC3CC,SAAS,EAITC,KAAMC,YAAK,CAAC1B,EAAWV,EAAWR,EAAUJ,IAC5CkC,QAEAe,mBAAmB,EACnBC,oBAAoB,EACpBC,eAAgB,CACdC,WAAY,CACVC,YAAa,oBACbC,YAAa,UAEfC,MAAO,CACLF,YAAa,eACbC,YAAa,OAEfE,OAAQ,CACNF,YAAa,UCnJnBG,IAASC,OACP,kBAAC,IAAD,CAAgBC,OAAQf,GACtB,kBAAC,EAAD,OAEFgB,SAASC,eAAe,W","file":"static/js/main.ddf267de.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport 'styles/App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      Watcha\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","\r\n      export interface IntrospectionResultData {\r\n        __schema: {\r\n          types: {\r\n            kind: string;\r\n            name: string;\r\n            possibleTypes: {\r\n              name: string;\r\n            }[];\r\n          }[];\r\n        };\r\n      }\r\n      const result: IntrospectionResultData = {\r\n  \"__schema\": {\r\n    \"types\": [\r\n      {\r\n        \"kind\": \"INTERFACE\",\r\n        \"name\": \"Node\",\r\n        \"possibleTypes\": [\r\n          {\r\n            \"name\": \"Asset\"\r\n          },\r\n          {\r\n            \"name\": \"Film\"\r\n          },\r\n          {\r\n            \"name\": \"Person\"\r\n          },\r\n          {\r\n            \"name\": \"Planet\"\r\n          },\r\n          {\r\n            \"name\": \"Species\"\r\n          },\r\n          {\r\n            \"name\": \"Starship\"\r\n          },\r\n          {\r\n            \"name\": \"Vehicle\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n};\r\n      export default result;\r\n    ","import { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory'\r\nimport { createHttpLink,  } from 'apollo-link-http'\r\nimport { setContext } from 'apollo-link-context'\r\nimport { onError } from 'apollo-link-error'\r\nimport { RetryLink } from \"apollo-link-retry\"\r\nimport { WebSocketLink } from \"apollo-link-ws\"\r\nimport { getMainDefinition } from 'apollo-utilities'\r\nimport { split , from } from 'apollo-link'\r\n\r\nimport introspectionQueryResultData from './fragmentTypes'\r\n\r\nconst GRAPHQL_ENDPOINT = \"api.graph.cool/simple/v1/swapi\"\r\n\r\n/**\r\n * @ref\r\n *  apollo-link-http: https://www.apollographql.com/docs/link/links/http/\r\n */\r\nconst httpLink = createHttpLink({\r\n  uri: `https://${GRAPHQL_ENDPOINT}`,\r\n  credentials: 'omit',\r\n})\r\n\r\n/**\r\n * @ref\r\n *  apollo-link-ws: https://www.apollographql.com/docs/link/links/ws/\r\n *  Subscriptions: https://www.apollographql.com/docs/react/data/subscriptions/\r\n */\r\n// const wsLink = new WebSocketLink({\r\n//   //uri: `ws://${GRAPHQL_ENDPOINT}`,\r\n//   options: {\r\n//     reconnect: true,\r\n//     connectionParams: {\r\n//       authorization: localStorage.getItem('token') ? `Bearer ${localStorage.getItem('token')}` : '',\r\n//     },\r\n//   }\r\n// })\r\n\r\n/**\r\n * @ref\r\n *  Composing Links: https://www.apollographql.com/docs/link/composition/#directional-composition\r\n */\r\n// const link = split(\r\n//   ({ query }) => {\r\n//     const definition = getMainDefinition(query)\r\n//     return (definition.kind === 'OperationDefinition' && definition.operation === 'subscription')\r\n//   },\r\n//   wsLink,\r\n//   httpLink,\r\n// )\r\n\r\n/**\r\n * @ref\r\n *  Authentication: https://www.apollographql.com/docs/react/networking/authentication/\r\n */\r\nconst authLink = setContext((operation, { headers }) => {\r\n  const token = localStorage.getItem('token')\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    }\r\n  }\r\n})\r\n\r\n/**\r\n * @ref\r\n *  apollo-link-retry: https://www.apollographql.com/docs/link/links/retry/\r\n */\r\nconst retryLink = new RetryLink({\r\n  delay: {\r\n    initial: 300,\r\n    max: 1000,\r\n    jitter: true\r\n  },\r\n  attempts: {\r\n    max: 5,\r\n    retryIf: (error, _operation) => !!error\r\n  }\r\n})\r\n\r\n/**\r\n * @ref\r\n *  apollo-link-error: https://www.apollographql.com/docs/link/links/error/\r\n */\r\nconst errorLink = onError(({ graphQLErrors, networkError, operation, forward }) => {\r\n  if (graphQLErrors) {\r\n    for (let err of graphQLErrors) {\r\n      switch ((err.extensions || {}).code) {\r\n        case 'UNAUTHENTICATED':\r\n          // error code is set to UNAUTHENTICATED\r\n          // when AuthenticationError thrown in resolver\r\n\r\n          // modify the operation context with a new token\r\n          const oldHeaders = operation.getContext().headers\r\n          operation.setContext({\r\n            headers: {\r\n              ...oldHeaders,\r\n              authorization: `new Token`,\r\n            },\r\n          })\r\n          // retry the request, returning the new observable\r\n          return forward(operation)\r\n      }\r\n    }\r\n  }\r\n  if (networkError) {\r\n    console.dir('Network Error', networkError)\r\n  }\r\n})\r\n\r\n/**\r\n * @ref\r\n *  caching: https://www.apollographql.com/docs/react/caching/cache-configuration/\r\n */\r\nconst cache = new InMemoryCache({\r\n  addTypename: true,\r\n  dataIdFromObject: (obj: any) => obj.key || null,\r\n  /**\r\n   * @ref\r\n   *  Graphql Code Generator: https://graphql-code-generator.com/\r\n   *  Using fragments: https://www.apollographql.com/docs/react/data/fragments/#fragments-on-unions-and-interfaces\r\n   *  fragment-matcher: https://graphql-code-generator.com/docs/plugins/fragment-matcher/\r\n   */\r\n  fragmentMatcher: new IntrospectionFragmentMatcher({\r\n    introspectionQueryResultData\r\n  }),\r\n  cacheRedirects: {},\r\n})\r\n\r\n/**\r\n * @ref\r\n *  ApolloClient: https://www.apollographql.com/docs/react/api/apollo-client/\r\n */\r\nexport const apolloClient = new ApolloClient({\r\n  ssrMode: false,\r\n  /**\r\n   * 에러 링크는 http 혹은 \r\n   */\r\n  link: from([errorLink, retryLink, authLink, httpLink]),\r\n  cache,\r\n  // 개발일때만 true\r\n  connectToDevTools: true,\r\n  queryDeduplication: true,\r\n  defaultOptions: {\r\n    watchQuery: {\r\n      fetchPolicy: 'cache-and-network',\r\n      errorPolicy: 'ignore',\r\n    },\r\n    query: {\r\n      fetchPolicy: 'network-only',\r\n      errorPolicy: 'all',\r\n    },\r\n    mutate: {\r\n      errorPolicy: 'all',\r\n    },\r\n  }\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\n\r\nimport { apolloClient } from './graphql';\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={apolloClient}>\r\n    <App />\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}